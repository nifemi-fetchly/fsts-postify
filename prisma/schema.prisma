datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  dislikes      Dislike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  imageUrls String[]
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  dislikes  Dislike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  imageUrls String[]
  likes     Like[]
  dislikes  Dislike[]
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())
}

model Like {
  id        String   @id @default(cuid())
  likedById String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  likedBy User     @relation(fields: [likedById], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([likedById, postId])
}

model Dislike {
  id           String  @id @default(cuid())
  dislikedById String
  postId       String?
  commentId    String?

  dislikedBy User     @relation(fields: [dislikedById], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])
  comment    Comment? @relation(fields: [commentId], references: [id])

  @@unique([dislikedById, postId])
}
